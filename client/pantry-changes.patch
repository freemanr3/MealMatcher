diff --git a/client/src/components/header.tsx b/client/src/components/header.tsx
index a1b3fd8..581c39d 100644
--- a/client/src/components/header.tsx
+++ b/client/src/components/header.tsx
@@ -1,6 +1,7 @@
-import { Link } from "wouter";
-import { Button } from "@/components/ui/button";
-import { useLocation } from "wouter";
+import { Link, useLocation } from 'wouter';
+import { motion } from 'framer-motion';
+import { Menu, X, ShoppingCart, User, Search, Home } from 'lucide-react';
+import { Button } from '@/components/ui/button';
 import {
   DropdownMenu,
   DropdownMenuContent,
@@ -8,52 +9,149 @@ import {
   DropdownMenuLabel,
   DropdownMenuSeparator,
   DropdownMenuTrigger,
-} from "@/components/ui/dropdown-menu";
-import { User, Settings, LogOut } from "lucide-react";
-import { useAuth } from '@/hooks/useAuth';
+} from '@/components/ui/dropdown-menu';
+import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
+import { BudgetTracker } from '@/components/budget-tracker';
+import { useAuth } from '@/context/AuthContext';
+import { useMealPlan } from '@/hooks/use-meal-plan';
+
+const links = [
+  { href: '/', label: 'Home', icon: Home },
+  { href: '/meal-planner', label: 'Meal Plan', icon: ShoppingCart },
+  { href: '/preferences', label: 'My Pantry', icon: Search },
+];
 
 export function Header() {
   const [location] = useLocation();
-  const isAuthPage = location === "/";
   const { user, logout } = useAuth();
+  const { mealPlan } = useMealPlan();
+  
+  const handleLogout = async () => {
+    await logout();
+  };
 
   return (
-    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
-      <div className="container flex h-14 items-center">
-        <div className="mr-4 hidden md:flex">
-          <Link href="/" className="mr-6 flex items-center space-x-2">
-            <span className="hidden font-bold sm:inline-block">Pantry Pal</span>
+    <header className="sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur">
+      <div className="container flex h-16 items-center justify-between">
+        <div className="flex items-center gap-6 md:gap-8">
+          <Link href="/" className="flex items-center space-x-2">
+            <motion.span 
+              className="hidden font-bold sm:inline-block text-xl"
+              initial={{ opacity: 0, x: -10 }}
+              animate={{ opacity: 1, x: 0 }}
+              transition={{ delay: 0.2 }}
+            >
+              Pantry Pal
+            </motion.span>
           </Link>
-          <nav className="flex items-center space-x-6 text-sm font-medium">
-            <Link href="/discover" className="transition-colors hover:text-foreground/80 text-foreground/60">
-              Discover
-            </Link>
-            <Link href="/ingredients" className="transition-colors hover:text-foreground/80 text-foreground/60">
-              Ingredients
-            </Link>
-            <Link href="/meal-planner" className="transition-colors hover:text-foreground/80 text-foreground/60">
-              Meal Planner
-            </Link>
-            <Link href="/pricing" className="transition-colors hover:text-foreground/80 text-foreground/60">
-              Pricing
-            </Link>
+          
+          <nav className="hidden md:flex gap-6">
+            {links.map((link) => {
+              const Icon = link.icon;
+              const isActive = location === link.href;
+              
+              return (
+                <Link
+                  key={link.href}
+                  href={link.href}
+                  className={`text-sm font-medium transition-colors ${
+                    isActive
+                      ? 'text-foreground'
+                      : 'text-muted-foreground hover:text-foreground'
+                  }`}
+                >
+                  <div className="flex items-center gap-1">
+                    <Icon className="h-4 w-4" />
+                    <span>{link.label}</span>
+                    {link.href === '/meal-planner' && mealPlan.length > 0 && (
+                      <span className="ml-1 rounded-full bg-primary w-5 h-5 flex items-center justify-center text-xs text-primary-foreground">
+                        {mealPlan.length}
+                      </span>
+                    )}
+                  </div>
+                </Link>
+              );
+            })}
           </nav>
         </div>
-        <div className="flex flex-1 items-center justify-between space-x-2 md:justify-end">
-          <div className="w-full flex-1 md:w-auto md:flex-none">
-            {/* Search bar can be added here if needed */}
-          </div>
-          <nav className="flex items-center">
-            {user ? (
-              <Button variant="ghost" onClick={logout}>
-                Logout
+        
+        {/* Budget Tracker - Visible only on desktop */}
+        <div className="hidden xl:flex items-center gap-4">
+          <BudgetTracker variant="compact" />
+        </div>
+
+        <div className="flex items-center gap-2">
+          {user ? (
+            <DropdownMenu>
+              <DropdownMenuTrigger asChild>
+                <Button variant="ghost" size="icon" className="rounded-full">
+                  <User className="h-5 w-5" />
+                </Button>
+              </DropdownMenuTrigger>
+              <DropdownMenuContent align="end">
+                <DropdownMenuLabel>
+                  <div className="flex flex-col">
+                    <span>{user.name}</span>
+                    <span className="text-xs text-muted-foreground">{user.email}</span>
+                  </div>
+                </DropdownMenuLabel>
+                <DropdownMenuSeparator />
+                <DropdownMenuItem onClick={handleLogout}>
+                  Logout
+                </DropdownMenuItem>
+              </DropdownMenuContent>
+            </DropdownMenu>
+          ) : (
+            <Button asChild variant="default" size="sm">
+              <Link href="/auth">Sign in</Link>
+            </Button>
+          )}
+
+          <Sheet>
+            <SheetTrigger asChild>
+              <Button variant="ghost" size="icon" className="md:hidden">
+                <Menu className="h-5 w-5" />
+                <span className="sr-only">Toggle menu</span>
               </Button>
-            ) : (
-              <Link href="/auth">
-                <Button>Login</Button>
-              </Link>
-            )}
-          </nav>
+            </SheetTrigger>
+            <SheetContent side="left">
+              <div className="flex flex-col gap-6 px-2">
+                <Link href="/" className="flex items-center py-2">
+                  <span className="font-bold text-xl">Pantry Pal</span>
+                </Link>
+                
+                {/* Mobile Budget Tracker */}
+                <BudgetTracker variant="default" className="mb-2" />
+                
+                <nav className="flex flex-col gap-3">
+                  {links.map((link) => {
+                    const Icon = link.icon;
+                    const isActive = location === link.href;
+                    
+                    return (
+                      <Link
+                        key={link.href}
+                        href={link.href}
+                        className={`flex items-center gap-3 px-3 py-2 text-sm font-medium rounded-md transition-colors ${
+                          isActive
+                            ? 'bg-accent text-accent-foreground'
+                            : 'hover:bg-accent hover:text-accent-foreground'
+                        }`}
+                      >
+                        <Icon className="h-4 w-4" />
+                        <span>{link.label}</span>
+                        {link.href === '/meal-planner' && mealPlan.length > 0 && (
+                          <span className="ml-auto rounded-full bg-primary w-5 h-5 flex items-center justify-center text-xs text-primary-foreground">
+                            {mealPlan.length}
+                          </span>
+                        )}
+                      </Link>
+                    );
+                  })}
+                </nav>
+              </div>
+            </SheetContent>
+          </Sheet>
         </div>
       </div>
     </header>
diff --git a/client/src/pages/preferences.tsx b/client/src/pages/preferences.tsx
index b148c15..e997e4d 100644
--- a/client/src/pages/preferences.tsx
+++ b/client/src/pages/preferences.tsx
@@ -1,4 +1,4 @@
-import { useState, useEffect } from "react";
+import { useState, useEffect, useRef } from "react";
 import { Link, useLocation } from "wouter";
 import { useQuery, useMutation } from "@tanstack/react-query";
 import { useToast } from "@/components/ui/use-toast";
@@ -7,12 +7,14 @@ import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
 import { Checkbox } from "@/components/ui/checkbox";
-import { ArrowLeft, Plus, Minus, ChevronLeft, Trash2 } from "lucide-react";
+import { Badge } from "@/components/ui/badge";
+import { ArrowLeft, Plus, Minus, ChevronLeft, Trash2, Search, Apple, Beef, Egg, Wheat, Coffee, Carrot } from "lucide-react";
 import { IngredientInput } from "@/components/ingredient-input";
 import { queryClient, apiRequest } from "@/lib/queryClient";
 import { API_CONFIG } from "@/lib/api-config";
 import { Header } from "@/components/header";
 import { cn } from "@/lib/utils";
+import { motion } from "framer-motion";
 
 // Define types locally until shared schema is set up
 type DietaryPreference = 'vegetarian' | 'vegan' | 'gluten-free' | 'dairy-free' | 'low-carb' | 'keto' | 'paleo';
@@ -35,14 +37,14 @@ interface Ingredient {
   quantity: string;
 }
 
-const DIETARY_OPTIONS: { label: string; value: DietaryPreference }[] = [
-  { label: "Vegetarian", value: "vegetarian" },
-  { label: "Vegan", value: "vegan" },
-  { label: "Gluten-Free", value: "gluten-free" },
-  { label: "Dairy-Free", value: "dairy-free" },
-  { label: "Low-Carb", value: "low-carb" },
-  { label: "Keto", value: "keto" },
-  { label: "Paleo", value: "paleo" },
+const DIETARY_OPTIONS: { label: string; value: DietaryPreference; icon: React.ReactNode }[] = [
+  { label: "Vegetarian", value: "vegetarian", icon: <Carrot className="h-4 w-4" /> },
+  { label: "Vegan", value: "vegan", icon: <Wheat className="h-4 w-4" /> },
+  { label: "Gluten-Free", value: "gluten-free", icon: <Wheat className="h-4 w-4 text-red-500" /> },
+  { label: "Dairy-Free", value: "dairy-free", icon: <Egg className="h-4 w-4 text-red-500" /> },
+  { label: "Low-Carb", value: "low-carb", icon: <Apple className="h-4 w-4" /> },
+  { label: "Keto", value: "keto", icon: <Beef className="h-4 w-4" /> },
+  { label: "Paleo", value: "paleo", icon: <Beef className="h-4 w-4" /> },
 ];
 
 // Common ingredients by category
@@ -55,17 +57,51 @@ const INGREDIENT_SUGGESTIONS = {
   Pantry: ['flour', 'sugar', 'oil', 'vinegar', 'soy sauce'],
 };
 
+// Ingredient category icons
+const getCategoryIcon = (ingredient: string) => {
+  const lowerIngredient = ingredient.toLowerCase();
+  
+  if (INGREDIENT_SUGGESTIONS.Proteins.some(item => lowerIngredient.includes(item))) {
+    return <Beef className="h-4 w-4 text-red-500" />;
+  }
+  
+  if (INGREDIENT_SUGGESTIONS.Vegetables.some(item => lowerIngredient.includes(item))) {
+    return <Carrot className="h-4 w-4 text-orange-500" />;
+  }
+  
+  if (INGREDIENT_SUGGESTIONS.Fruits.some(item => lowerIngredient.includes(item))) {
+    return <Apple className="h-4 w-4 text-green-500" />;
+  }
+  
+  if (INGREDIENT_SUGGESTIONS["Dairy & Alternatives"].some(item => lowerIngredient.includes(item))) {
+    return <Egg className="h-4 w-4 text-yellow-500" />;
+  }
+  
+  if (INGREDIENT_SUGGESTIONS["Grains & Starches"].some(item => lowerIngredient.includes(item))) {
+    return <Wheat className="h-4 w-4 text-amber-500" />;
+  }
+  
+  return <Coffee className="h-4 w-4 text-stone-500" />;
+};
+
 export function IngredientsPage() {
   const { toast } = useToast();
   const [, setLocation] = useLocation();
   const [ingredients, setIngredients] = useState<Ingredient[]>([]);
   const [newIngredient, setNewIngredient] = useState<Ingredient>({ name: '', quantity: '' });
   const [selectedIngredient, setSelectedIngredient] = useState<Ingredient | null>(null);
+  const [dietaryPreferences, setDietaryPreferences] = useState<DietaryPreference[]>([]);
+  const quantityInputRef = useRef<HTMLInputElement>(null);
+  const nameInputRef = useRef<HTMLInputElement>(null);
 
   useEffect(() => {
     // Load saved ingredients from localStorage
     const savedIngredients = JSON.parse(localStorage.getItem('selectedIngredients') || '[]');
     setIngredients(savedIngredients);
+    
+    // Load saved dietary preferences from localStorage
+    const savedPreferences = JSON.parse(localStorage.getItem('dietaryPreferences') || '[]');
+    setDietaryPreferences(savedPreferences);
   }, []);
 
   const handleAddIngredient = () => {
@@ -74,6 +110,11 @@ export function IngredientsPage() {
       setIngredients(updatedIngredients);
       localStorage.setItem('selectedIngredients', JSON.stringify(updatedIngredients));
       setNewIngredient({ name: '', quantity: '' });
+      
+      // Focus back on the name input after adding
+      if (nameInputRef.current) {
+        nameInputRef.current.focus();
+      }
     }
   };
 
@@ -86,95 +127,179 @@ export function IngredientsPage() {
     }
   };
 
-  const handleSelectIngredient = (ingredient: Ingredient) => {
-    setSelectedIngredient(ingredient);
+  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>, field: 'name' | 'quantity') => {
+    if (e.key === 'Enter') {
+      e.preventDefault();
+      if (field === 'name' && newIngredient.name && quantityInputRef.current) {
+        quantityInputRef.current.focus();
+      } else if (field === 'quantity' && newIngredient.quantity) {
+        handleAddIngredient();
+      }
+    }
+  };
+
+  const handleDietaryPreferenceChange = (preference: DietaryPreference) => {
+    setDietaryPreferences(current => {
+      const updated = current.includes(preference)
+        ? current.filter(p => p !== preference)
+        : [...current, preference];
+      
+      // Save to localStorage
+      localStorage.setItem('dietaryPreferences', JSON.stringify(updated));
+      return updated;
+    });
   };
 
   const handleSave = () => {
+    // Make sure we save all data
+    localStorage.setItem('selectedIngredients', JSON.stringify(ingredients));
+    localStorage.setItem('dietaryPreferences', JSON.stringify(dietaryPreferences));
+    localStorage.setItem('availableIngredients', JSON.stringify(ingredients.map(i => i.name)));
+    
+    toast({
+      title: "Preferences saved!",
+      description: "Your ingredients and dietary preferences have been saved successfully."
+    });
     setLocation('/discover');
   };
 
   return (
-    <div className="container mx-auto p-4">
+    <div className="container mx-auto p-4 max-w-xl">
       <div className="flex items-center mb-6">
         <Link href="/discover">
-          <Button variant="ghost" size="icon">
-            <ChevronLeft className="h-4 w-4" />
+          <Button variant="ghost" size="icon" className="hover:bg-orange-50">
+            <ChevronLeft className="h-5 w-5" />
           </Button>
         </Link>
-        <h1 className="text-2xl font-bold ml-4">My Ingredients</h1>
+        <h1 className="text-2xl font-bold ml-2">My Pantry</h1>
       </div>
 
-      <Card className="p-4 mb-6">
-        <div className="space-y-4">
-          <div className="grid grid-cols-2 gap-4">
-            <div>
-              <Label htmlFor="ingredient">Ingredient</Label>
-              <Input
-                id="ingredient"
-                value={newIngredient.name}
-                onChange={(e) => setNewIngredient({ ...newIngredient, name: e.target.value })}
-                placeholder="e.g., chicken breast"
-              />
-            </div>
-            <div>
-              <Label htmlFor="quantity">Quantity</Label>
-              <Input
-                id="quantity"
-                value={newIngredient.quantity}
-                onChange={(e) => setNewIngredient({ ...newIngredient, quantity: e.target.value })}
-                placeholder="e.g., 500g"
-              />
+      {/* Dietary Preferences Section */}
+      <Card className="mb-6 overflow-hidden shadow-sm border-0 bg-gradient-to-r from-orange-50 to-amber-50">
+        <CardHeader className="pb-2">
+          <CardTitle className="text-lg">Dietary Preferences</CardTitle>
+        </CardHeader>
+        <CardContent>
+          <div className="flex flex-wrap gap-2 mt-2">
+            {DIETARY_OPTIONS.map((option) => (
+              <Button
+                key={option.value}
+                variant={dietaryPreferences.includes(option.value) ? "default" : "outline"}
+                className={cn(
+                  "rounded-full border transition-all",
+                  dietaryPreferences.includes(option.value) 
+                    ? "bg-orange-500 text-white border-orange-500 hover:bg-orange-600" 
+                    : "bg-white border-orange-100 text-gray-700 hover:bg-orange-50"
+                )}
+                onClick={() => handleDietaryPreferenceChange(option.value)}
+              >
+                <span className="flex items-center gap-2">
+                  {option.icon}
+                  {option.label}
+                </span>
+              </Button>
+            ))}
+          </div>
+        </CardContent>
+      </Card>
+
+      {/* Ingredients Section */}
+      <Card className="mb-6 overflow-hidden shadow-sm border-0 bg-gradient-to-r from-orange-50 to-amber-50">
+        <CardHeader className="pb-2">
+          <CardTitle className="text-lg">Add Ingredients</CardTitle>
+        </CardHeader>
+        <CardContent>
+          <div className="space-y-4">
+            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+              <div className="space-y-2">
+                <Label htmlFor="ingredient" className="text-sm font-medium">
+                  Ingredient
+                </Label>
+                <div className="relative">
+                  <Input
+                    id="ingredient"
+                    ref={nameInputRef}
+                    value={newIngredient.name}
+                    onChange={(e) => setNewIngredient({ ...newIngredient, name: e.target.value })}
+                    onKeyDown={(e) => handleKeyDown(e, 'name')}
+                    placeholder="e.g., chicken breast"
+                    className="pl-9 rounded-full h-11 border-orange-100 focus-visible:ring-orange-200"
+                  />
+                  <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground">
+                    <Search className="h-4 w-4" />
+                  </div>
+                </div>
+              </div>
+              <div className="space-y-2">
+                <Label htmlFor="quantity" className="text-sm font-medium">
+                  Quantity
+                </Label>
+                <Input
+                  id="quantity"
+                  ref={quantityInputRef}
+                  value={newIngredient.quantity}
+                  onChange={(e) => setNewIngredient({ ...newIngredient, quantity: e.target.value })}
+                  onKeyDown={(e) => handleKeyDown(e, 'quantity')}
+                  placeholder="e.g., 500g"
+                  className="rounded-full h-11 border-orange-100 focus-visible:ring-orange-200"
+                />
+              </div>
             </div>
+            <Button 
+              onClick={handleAddIngredient} 
+              className="w-full rounded-full bg-orange-500 hover:bg-orange-600 shadow-sm h-11 transition-all hover:shadow"
+            >
+              <Plus className="mr-2 h-4 w-4" />
+              Add Ingredient
+            </Button>
           </div>
-          <Button onClick={handleAddIngredient} className="w-full">
-            <Plus className="mr-2 h-4 w-4" />
-            Add Ingredient
-          </Button>
-        </div>
+        </CardContent>
       </Card>
 
       <div className="space-y-4">
-        <h2 className="text-lg font-semibold">Your Ingredients</h2>
+        <h2 className="text-lg font-semibold text-gray-800">Your Ingredients</h2>
         {ingredients.length === 0 ? (
-          <Card className="p-4">
-            <p className="text-muted-foreground">No ingredients added yet. Add some to get recipe suggestions!</p>
+          <Card className="p-6 text-center bg-white shadow-sm border border-dashed border-orange-200">
+            <p className="text-muted-foreground">No ingredients added yet. Add some ingredients to get recipe suggestions!</p>
           </Card>
         ) : (
-          <div className="space-y-4">
+          <div className="flex flex-wrap gap-2 mt-2">
             {ingredients.map((ingredient, index) => (
-              <Card 
-                key={index} 
+              <motion.div
+                key={index}
+                initial={{ opacity: 0, scale: 0.8 }}
+                animate={{ opacity: 1, scale: 1 }}
+                exit={{ opacity: 0, scale: 0.8 }}
+                whileHover={{ y: -2 }}
                 className={cn(
-                  "p-4 cursor-pointer transition-colors",
-                  selectedIngredient?.name === ingredient.name ? "bg-orange-50 border-orange-200" : ""
+                  "flex items-center gap-2 bg-white border border-orange-100 px-3 py-2 rounded-full shadow-sm",
+                  selectedIngredient?.name === ingredient.name ? "bg-orange-50 border-orange-200 ring-1 ring-orange-200" : ""
                 )}
-                onClick={() => handleSelectIngredient(ingredient)}
               >
-                <div className="flex items-center justify-between">
-                  <div>
-                    <p className="font-medium">{ingredient.name}</p>
-                    <p className="text-sm text-muted-foreground">{ingredient.quantity}</p>
-                  </div>
-                  <Button
-                    variant="ghost"
-                    size="icon"
-                    onClick={(e) => {
-                      e.stopPropagation();
-                      handleRemoveIngredient(index);
-                    }}
-                  >
-                    <Trash2 className="h-4 w-4" />
-                  </Button>
+                <div className="flex-shrink-0">
+                  {getCategoryIcon(ingredient.name)}
+                </div>
+                <div className="flex-grow min-w-0">
+                  <p className="font-medium text-sm truncate">{ingredient.name}</p>
+                  <p className="text-xs text-muted-foreground">{ingredient.quantity}</p>
                 </div>
-              </Card>
+                <button
+                  onClick={() => handleRemoveIngredient(index)}
+                  className="flex-shrink-0 p-1 hover:bg-orange-100 rounded-full text-gray-500 hover:text-gray-700 transition-colors"
+                >
+                  <Trash2 className="h-3.5 w-3.5" />
+                </button>
+              </motion.div>
             ))}
           </div>
         )}
       </div>
 
-      <div className="mt-6">
-        <Button onClick={handleSave} className="w-full">
+      <div className="mt-8">
+        <Button 
+          onClick={handleSave} 
+          className="w-full py-6 rounded-full bg-gradient-to-r from-orange-500 to-amber-500 hover:from-orange-600 hover:to-amber-600 shadow-md hover:shadow-lg transition-all"
+        >
           Save and Continue
         </Button>
       </div>
